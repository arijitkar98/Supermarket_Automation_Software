/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package sas;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import static java.lang.Character.isDigit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import java.util.Date;

/**
 *
 * @author arijit
 */
public class SalesClerkPage extends javax.swing.JFrame {
    private String username;
    private int sales;
    private int profit;
    private int sold[];
    private int itemPriceRealized[];
    private int itemProfit[];
    /**
     * Creates new form SalesClerkPage
     */
    public SalesClerkPage() {
        initComponents();
    }
    public SalesClerkPage(String username) {
        this.username = username;
        initComponents();
        newtrans.setEnabled(true);
        add.setEnabled(false);
        clear.setEnabled(false);
        canceltrans.setEnabled(false);
        print.setEnabled(false);
        itemid.setEnabled(false);
        quantity_weight.setEnabled(false);
        total.setEnabled(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newtrans = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        itemid = new javax.swing.JTextField();
        quantity_weight = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        canceltrans = new javax.swing.JButton();
        print = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        total = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        changepasswd = new javax.swing.JMenuItem();
        logout = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        profile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        newtrans.setText("New Transaction");
        newtrans.setToolTipText("");
        newtrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newtransActionPerformed(evt);
            }
        });

        jLabel1.setText("Product ID");

        jLabel2.setText("Quantity/Weight");

        itemid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                itemidKeyTyped(evt);
            }
        });

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Rate", "Quantity_or_Weight", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        canceltrans.setMnemonic('C');
        canceltrans.setText("Cancel Transaction");
        canceltrans.setAutoscrolls(true);
        canceltrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canceltransActionPerformed(evt);
            }
        });

        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        total.setEditable(false);
        jScrollPane2.setViewportView(total);

        jLabel4.setText("Total");

        jMenu1.setMnemonic('F');
        jMenu1.setText("File");

        changepasswd.setMnemonic('C');
        changepasswd.setText("Change Password");
        changepasswd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changepasswdActionPerformed(evt);
            }
        });
        jMenu1.add(changepasswd);

        logout.setMnemonic('L');
        logout.setText("Log Out");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jMenu1.add(logout);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('V');
        jMenu2.setText("View");

        profile.setMnemonic('P');
        profile.setText("Profile");
        profile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileActionPerformed(evt);
            }
        });
        jMenu2.add(profile);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newtrans)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(73, 73, 73)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(itemid, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(quantity_weight, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(canceltrans)
                .addGap(87, 87, 87)
                .addComponent(print)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 224, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newtrans)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(itemid, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(add))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(quantity_weight, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clear))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(canceltrans)
                            .addComponent(print)
                            .addComponent(jLabel4))))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void canceltransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canceltransActionPerformed
        new SalesClerkPage(username).setVisible(true);
        dispose();// TODO add your handling code here:
    }//GEN-LAST:event_canceltransActionPerformed
    
    private void newtransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newtransActionPerformed
        sales = 0;
        profit = 0;
        itemid.setText(null);// TODO add your handling code here:
        quantity_weight.setText(null);// TODO add your handling code here:
        total.setText(null);// TODO add your handling code here:
        
        add.setEnabled(true);
        clear.setEnabled(true);
        canceltrans.setEnabled(true);
        print.setEnabled(true);
        itemid.setEnabled(true);
        quantity_weight.setEnabled(true);
        
        sold = new int[100];
        itemPriceRealized = new int[100];
        itemProfit = new int[100];
        
        String query = null;
        try{
            Connection conn = new ConnectionHandler().createConnection();
            Statement statement = conn.createStatement();
            query = "truncate table Transaction";
            
            PreparedStatement pst = conn.prepareStatement(query);
            pst.executeUpdate();
            pst.close();
            
            
        } catch (InstantiationException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_newtransActionPerformed
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        String itemID = null, itemName = null;
        int Current_Quantity = 1;
        int MRP = 1, buying = 1, discount = 1;
        int Quantity_Weight = 1;
        int newQuantity = 1;
        itemID = itemid.getText();
        Quantity_Weight = Integer.parseInt(quantity_weight.getText());
        int Price = 1;
        
        String query = null;
        try{
            Connection conn = new ConnectionHandler().createConnection();
            Statement statement = conn.createStatement();
            query = "select * from Products where Product_ID=?";
            
            PreparedStatement pst = conn.prepareStatement(query);
            pst.setInt(1,Integer.parseInt(itemid.getText()));
            
            ResultSet rs = pst.executeQuery();
            rs.next();
            itemName = rs.getString("Name");
            MRP = rs.getInt("MRP");
            buying = rs.getInt("Buying_Price");
            discount = rs.getInt("Discount");
            Current_Quantity = rs.getInt("Quantity_or_Weight");
            pst.close();
            
            
        } catch (InstantiationException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(Current_Quantity >= Quantity_Weight) {
            Price = Quantity_Weight*MRP;
            profit += Quantity_Weight*buying;
            
            sold[Integer.parseInt(itemid.getText()) - 1] = Quantity_Weight;
            itemPriceRealized[Integer.parseInt(itemid.getText()) - 1] = Quantity_Weight*MRP;
            itemProfit[Integer.parseInt(itemid.getText()) - 1] = Quantity_Weight*(MRP - buying);
            
            try {
                
                Connection conn = new ConnectionHandler().createConnection();
                Statement statement = conn.createStatement();
                String sql = "update Products set Quantity_or_Weight=? where Product_ID=?";
                
                PreparedStatement pst = conn.prepareStatement(sql);
                newQuantity = Current_Quantity - Quantity_Weight;
                pst.setInt(1,newQuantity);
                pst.setInt(2,Integer.parseInt(itemid.getText()));
                pst.executeUpdate();
                pst.close();
                
            } catch (SQLException ex) {
                Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                
                Connection conn = new ConnectionHandler().createConnection();
                Statement statement = conn.createStatement();
                String sql = "insert into Transaction (Product_ID, Product_Name, MRP, Quantity_or_Weight, Price) values"
                        + "(?, ?, ?, ?, ?)";
                PreparedStatement pst = conn.prepareStatement(sql);
                pst.setInt(1,Integer.parseInt(itemid.getText()));
                pst.setString(2,itemName);
                pst.setInt(3,MRP);
                pst.setInt(4,Quantity_Weight);
                pst.setInt(5,Price);
                pst.executeUpdate();
                pst.close();
                
            } catch (SQLException ex) {
                Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try{
                Connection conn = new ConnectionHandler().createConnection();
                Statement statement = conn.createStatement();
                String sql = "select Product_Name,MRP,Quantity_or_Weight,Price from Transaction";
                PreparedStatement pst = conn.prepareStatement(sql);
                ResultSet rs = pst.executeQuery(sql);
                jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                pst.close();
            } catch (InstantiationException ex) {
                Logger.getLogger(SalesClerkPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(SalesClerkPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(SalesClerkPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            sales += Price;
            total.setText("" + sales);
            
            itemid.setText(null);
            quantity_weight.setText(null);
        }
        else {
            JOptionPane.showMessageDialog(null, "Required quantity more than stock!", "Error", JOptionPane.ERROR_MESSAGE);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_addActionPerformed
    
    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        itemid.setText(null);// TODO add your handling code here:
        quantity_weight.setText(null);// TODO add your handling code here:
    }//GEN-LAST:event_clearActionPerformed
    
    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        java.util.Date date = new Date();
        java.sql.Date sqlDate = new java.sql.Date(date.getTime());
        int id = 0;
        try {
            
            Connection conn = new ConnectionHandler().createConnection();
            Statement statement = conn.createStatement();
            String get = "select TransID from SalesHistory";
            ResultSet rs = statement.executeQuery(get);
            
            while(rs.next()) {
                id = rs.getInt("transID");
            }
            id++;
            String sql = "insert into SalesHistory (TransID,Time, Sales, Profit) values"
                    + "(?, ?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1,id);
            pst.setDate(2,sqlDate);
            pst.setInt(3,sales);
            pst.setInt(4,profit);
            pst.executeUpdate();
            pst.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        DataOutputStream dout = new DataOutputStream(bout);
        for (int d : sold) {
            try {
                dout.writeInt(d);
            } catch (IOException ex) {
                Logger.getLogger(SalesClerkPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            dout.close();
        } catch (IOException ex) {
            Logger.getLogger(SalesClerkPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte[] asBytes = bout.toByteArray();
        
        bout = new ByteArrayOutputStream();
        dout = new DataOutputStream(bout);
        for (int d : itemPriceRealized) {
            try {
                dout.writeInt(d);
            } catch (IOException ex) {
                Logger.getLogger(SalesClerkPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            dout.close();
        } catch (IOException ex) {
            Logger.getLogger(SalesClerkPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte[] asBytes1 = bout.toByteArray();
        
        bout = new ByteArrayOutputStream();
        dout = new DataOutputStream(bout);
        for (int d : itemProfit) {
            try {
                dout.writeInt(d);
            } catch (IOException ex) {
                Logger.getLogger(SalesClerkPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            dout.close();
        } catch (IOException ex) {
            Logger.getLogger(SalesClerkPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte[] asBytes2 = bout.toByteArray();
        
        try {
            java.util.Date transDate = new Date();
            sqlDate = new java.sql.Date(transDate.getTime());
            Connection conn = new ConnectionHandler().createConnection();
            Statement statement = conn.createStatement();
            String get = "select TransID from ItemStats";
            ResultSet rs = statement.executeQuery(get);
            id = 0;
            while(rs.next()) {
                id = rs.getInt("TransID");
            }
            id++;
            
            String sql = "insert into ItemStats (TransID, Date, Items, ItemPriceRealized, ItemsProfit) values(?, ?, ?, ?, ?)";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1,id);
            pst.setDate(2,sqlDate);
            pst.setBytes(3,asBytes);
            pst.setBytes(4,asBytes1);
            pst.setBytes(5,asBytes2);
            pst.executeUpdate();
            pst.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(AddEmployee.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Document doc = new Document();
            PdfWriter.getInstance(doc, new FileOutputStream("Bill - TransID " + id +".pdf"));
            doc.open();
            PdfPTable pdfTable = new PdfPTable(jTable1.getColumnCount());
            for (int i = 0; i < jTable1.getColumnCount(); i++) {
                pdfTable.addCell(jTable1.getColumnName(i));
            }
            for (int rows = 0; rows < jTable1.getRowCount(); rows++) {
                for (int cols = 0; cols < jTable1.getColumnCount(); cols++) {
                    pdfTable.addCell(jTable1.getModel().getValueAt(rows, cols).toString());                    
                }
            }
            doc.add(new Paragraph("Bill - TransID " + id));
            doc.add(new Paragraph("Date - " + new Date()));
            doc.add(new Paragraph(" "));            
            doc.add(pdfTable);
            doc.add(new Paragraph(" "));                        
            doc.add(new Paragraph("Total - " + sales));
            doc.close();
            System.out.println("done");
        } catch (DocumentException ex) {
            Logger.getLogger(OverallStatistics.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(OverallStatistics.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, "Bill has been printed!", "Success", JOptionPane.INFORMATION_MESSAGE);
        new SalesClerkPage(username).setVisible(true);
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_printActionPerformed
    
    private void profileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileActionPerformed
        new Profile(username,"SalesClerk").setVisible(true);
        dispose();// TODO add your handling code here:
    }//GEN-LAST:event_profileActionPerformed
    
    private void changepasswdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changepasswdActionPerformed
        new ChangePassword(username,"SalesClerk").setVisible(true);
        dispose();// TODO add your handling code here:
    }//GEN-LAST:event_changepasswdActionPerformed
    
    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        new FirstPage().setVisible(true);
        dispose();// TODO add your handling code here:
    }//GEN-LAST:event_logoutActionPerformed

    private void itemidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemidKeyTyped
        char c = evt.getKeyChar();
        if(!isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_itemidKeyTyped
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesClerkPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesClerkPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesClerkPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesClerkPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesClerkPage().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton canceltrans;
    private javax.swing.JMenuItem changepasswd;
    private javax.swing.JButton clear;
    private javax.swing.JTextField itemid;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuItem logout;
    private javax.swing.JButton newtrans;
    private javax.swing.JButton print;
    private javax.swing.JMenuItem profile;
    private javax.swing.JTextField quantity_weight;
    private javax.swing.JTextPane total;
    // End of variables declaration//GEN-END:variables
}
